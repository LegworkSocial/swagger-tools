From e0243f10050b320a64dd9720a85186047ed83626 Mon Sep 17 00:00:00 2001
From: manny <manny@legworkprm.com>
Date: Tue, 2 Aug 2022 14:26:20 -0700
Subject: [PATCH 4/4] pull type definitions from DefinitelyTyped for
 "@types/swagger-tools"

---
 index.d.ts | 174 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 173 insertions(+), 1 deletion(-)

diff --git a/index.d.ts b/index.d.ts
index 763ade4..2f3ec9b 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -1 +1,173 @@
-declare module '@legwork/swagger-tools';
+// Type definitions for swagger-tools 0.10
+// Project: https://github.com/apigee-127/swagger-tools
+// Definitions by: Alex Brick <https://github.com/bricka>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 2.2
+
+import { NextHandleFunction } from 'connect';
+import { IncomingMessage, ServerResponse } from 'http';
+
+export interface SwaggerParameterSchema {
+    allowMultiple?: boolean | undefined;
+    description?: string | undefined;
+    format?: string | undefined;
+    in?: string | undefined;
+    maximum?: string | undefined;
+    minimum?: string | undefined;
+    name: string;
+    paramType?: string | undefined;
+    required?: boolean | undefined;
+    type: string;
+}
+
+export interface SwaggerRequestParameter<T> {
+    path: string[];
+    schema: SwaggerParameterSchema;
+    originalValue: any;
+    value: T;
+}
+
+export interface SwaggerRequestParameters {
+    [paramName: string]: SwaggerRequestParameter<any> | undefined;
+}
+
+export interface Swagger12Request extends IncomingMessage {
+    swagger: {
+        api: any;
+        apiDeclaration: any;
+        apiIndex: number;
+        authorizations?: any;
+        operation?: any;
+        operationPath?: string[] | undefined;
+        params: SwaggerRequestParameters;
+        resourceIndex: number;
+        resourceListing: any;
+        swaggerVersion: string;
+        useStubs?: boolean | undefined;
+    };
+}
+
+export type SwaggerRouter12HandlerFunction = (req: Swagger12Request, res: ServerResponse, next: (arg?: any) => void) => void;
+
+export interface SwaggerRouter12OptionsControllers {
+    [handlerName: string]: SwaggerRouter12HandlerFunction;
+}
+
+export interface SwaggerRouter12Options {
+    controllers?: SwaggerRouter12OptionsControllers | string | string[] | undefined;
+    ignoreMissingHandlers?: boolean | undefined;
+    useStubs?: boolean | undefined;
+}
+
+export interface OperationParameter {
+    path: string[];
+    schema: SwaggerParameterSchema;
+}
+
+export interface Swagger20Security {
+    [name: string]: any;
+}
+
+export interface Swagger20Response {
+    description?: string | undefined;
+    schema?: any;
+}
+
+export interface Swagger20Operation {
+    operationId?: string | undefined;
+    parameters?: SwaggerParameterSchema[] | undefined;
+    responses: { [code: string]: Swagger20Response };
+    security?: Swagger20Security[] | undefined;
+    summary?: string | undefined;
+    tags?: string[] | undefined;
+}
+
+export interface Swagger20Request<P extends SwaggerRequestParameters> extends IncomingMessage {
+    swagger: {
+        apiPath: string;
+        operation?: Swagger20Operation | undefined;
+        operationPath?: string[] | undefined;
+        operationParameters?: OperationParameter[] | undefined;
+        path: any;
+        params: P;
+        security: any[];
+        swaggerObject: any;
+        swaggerVersion: string;
+        useStubs?: boolean | undefined;
+    };
+}
+
+export type SwaggerRouter20HandlerFunction = (req: Swagger20Request<any>, res: ServerResponse, next: (arg?: any) => void) => void;
+
+export interface SwaggerRouter20OptionsControllers {
+    [handlerName: string]: SwaggerRouter20HandlerFunction;
+}
+
+export interface SwaggerRouter20Options {
+    controllers?: SwaggerRouter20OptionsControllers | string | string[] | undefined;
+    ignoreMissingHandlers?: boolean | undefined;
+    useStubs?: boolean | undefined;
+}
+
+export interface SwaggerSecurityError {
+    code?: string | undefined;
+    message?: string | undefined;
+    state?: string | undefined;
+    statusCode?: number | undefined;
+}
+
+export type SwaggerSecurityCallback = (err?: SwaggerSecurityError) => void;
+
+export type SwaggerSecurityHandler = (request: IncomingMessage, securityDefinition: any, scopes: string | string[], callback: SwaggerSecurityCallback) => void;
+
+export interface SwaggerSecurityOptions {
+    [securityDefinitionName: string]: SwaggerSecurityHandler;
+}
+
+export interface SwaggerUi12ApiDeclarations {
+    [path: string]: any;
+}
+
+export interface SwaggerUiOptions {
+    apiDocs?: string | undefined;
+    apiDocsPrefix?: string | undefined;
+    swaggerUi?: string | undefined;
+    swaggerUiDir?: string | undefined;
+    swaggerUiPrefix?: string | undefined;
+}
+
+export interface SwaggerValidatorOptions {
+    validateResponse?: boolean | undefined;
+}
+
+export interface Middleware {
+    swaggerMetadata(): NextHandleFunction;
+    swaggerSecurity(options?: SwaggerSecurityOptions): NextHandleFunction;
+    swaggerValidator(options?: SwaggerValidatorOptions): NextHandleFunction;
+}
+
+export interface Middleware12 extends Middleware {
+    swaggerRouter(options?: SwaggerRouter12Options): NextHandleFunction;
+    swaggerUi(apiDeclarations: SwaggerUi12ApiDeclarations, options?: SwaggerUiOptions): NextHandleFunction;
+}
+
+export interface Middleware20 extends Middleware {
+    swaggerRouter(options?: SwaggerRouter20Options): NextHandleFunction;
+    swaggerUi(options?: SwaggerUiOptions): NextHandleFunction;
+}
+
+export type InitializeMiddlewareCallback12 = (middleware: Middleware12) => void;
+
+export type InitializeMiddlewareCallback20 = (middleware: Middleware20) => void;
+
+export interface Resource {
+    resourcePath: string;
+}
+
+export function initializeMiddleware(swaggerObject: any, callback: InitializeMiddlewareCallback20): void;
+
+export function initializeMiddleware(
+    swaggerObject: any,
+    resources: Resource[],
+    callback: InitializeMiddlewareCallback12
+): void;
-- 
2.25.1

